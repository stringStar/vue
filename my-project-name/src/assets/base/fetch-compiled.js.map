{"version":3,"sources":["fetch.js"],"names":[],"mappings":";;;;;;;;AAGA,IAAM,UAAU,WAAhB;AACA,IAAM;AAAA,wDAAO;AAAA,QAAM,IAAN,uEAAa,KAAb;AAAA,QAAoB,GAApB,uEAA0B,EAA1B;AAAA,QAA8B,IAA9B,uEAAqC,EAArC;AAAA,QAAyC,MAAzC,uEAAkD,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,mBAAO,KAAK,WAAL,EAAP;AACA,kBAAM,UAAU,GAAhB;AACA,gBAAI,QAAQ,KAAZ,EAAmB;AACb,qBADa,GACH,EADG;;AAEjB,2BAAY,IAAZ,EAAkB,OAAlB,CAA0B,eAAO;AAC/B,2BAAW,MAAM,GAAN,GAAY,KAAK,GAAL,CAAZ,GAAwB,GAAnC;AACD,eAFD;;AAIA,kBAAI,YAAY,EAAhB,EAAoB;AAClB,0BAAU,QAAQ,MAAR,CAAe,CAAf,EAAkB,QAAQ,WAAR,CAAoB,GAApB,CAAlB,CAAV;AACA,sBAAM,MAAM,GAAN,GAAY,OAAlB;AACD;AACF;;AAbU,kBAcR,OAAO,KAAP,IAAgB,UAAU,OAdlB;AAAA;AAAA;AAAA;;AAeL,yBAfK,GAeW;AAClB,2BAAa,SADK;AAElB,sBAAQ,IAFU;AAGlB,uBAAS;AACP,0BAAU,kBADH;AAEP,gCAAgB;AAFT,eAHS;AAOlB,oBAAM,MAPY;AAQlB,qBAAO;AARW,aAfX;;;AA0BT,gBAAG,QAAQ,MAAX,EAAmB;AACjB,qBAAO,cAAP,CAAsB,aAAtB,EAAqC,MAArC,EAA4C;AAC1C,uBAAO,gBAAe,IAAf;AADmC,eAA5C;AAGD;AA9BQ;AAAA;AAAA,mBAgCc,MAAM,GAAN,EAAW,aAAX,CAhCd;;AAAA;AAgCH,oBAhCG;AAAA;AAAA,mBAiCmB,SAAS,IAAT,EAjCnB;;AAAA;AAiCH,yBAjCG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAmCD,IAAI,KAAJ,aAnCC;;AAAA;AAAA,6CAqCF,aArCE;;AAAA;AAuCL,sBAvCK;;AAwCT,gBAAI,OAAO,cAAX,EAA2B;AACzB,2BAAa,IAAI,cAAJ,EAAb;AACD,aAFD,MAEO;AACL,2BAAa,IAAI,aAAJ,CAAkB,mBAAlB,CAAb;AACD;AACG,oBA7CK,GA6CM,EA7CN;;AA8CT,gBAAI,QAAQ,MAAZ,EAAoB;AAClB,yBAAW,gBAAe,IAAf,CAAX;AACD;AACD,uBAAW,IAAX,CAAgB,IAAhB,EAAsB,GAAtB,EAA2B,IAA3B;AACA,uBAAW,gBAAX,CAA4B,cAA5B,EAA2C,mCAA3C;AACA,uBAAW,IAAX,CAAgB,QAAhB;AACA,uBAAW,kBAAX,GAAgC,YAAM;AACpC,kBAAI,WAAW,UAAX,KAA0B,CAA9B,EAAiC;AAC/B,oBAAI,WAAW,KAAX,KAAqB,GAAzB,EAA8B;AAC5B,sBAAI,MAAM,WAAW,QAArB;AACA,sBAAI,QAAO,GAAP,yCAAO,GAAP,OAAe,QAAnB,EAA6B;AAC3B,0BAAM,KAAK,KAAL,CAAW,GAAX,CAAN;AACD;AACD,yBAAO,GAAP;AACD,iBAND,MAMO;AACL,wBAAM,IAAI,KAAJ,CAAU,UAAV,CAAN;AACD;AACF;AACF,aAZD;;AApDS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;;AAAA;AAAA;AAAA;AAAA,GAAN;AAoEA,eAAe,IAAf","file":"fetch-compiled.js","sourcesContent":["/**\n * @fetch\n* */\nconst baseUrl = '172.10.12'\nconst ajax = async(type = 'GET', url = '', data = {}, method = 'fetch') => {\n  type = type.toUpperCase();\n  url = baseUrl + url;\n  if (type == 'GET') {\n    let dataStr = '';  // get请求数据拼接\n    Object.keys(data).forEach(key => {\n      dataStr += key + '=' + data[key] + '&';\n    });\n\n    if (dataStr !== '') {\n      dataStr = dataStr.substr(0, dataStr.lastIndexOf('&'));\n      url = url + '?' + dataStr;\n    }\n  }\n  if(window.fetch && method == 'fetch') {\n    let requireConfig = {\n      credentials: 'include',\n      method: type,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      mode: 'cros',\n      cache: 'force-cache'\n    };\n\n    if(type == 'POST') {\n      Object.defineProperty(requireConfig, 'body',{\n        value: JSON.stringify(data)\n      })\n    }\n    try {\n      var response = await fetch(url, requireConfig);\n      var responeseJson = await response.json();\n    } catch (error) {\n      throw new Error(error)\n    }\n    return responeseJson\n  } else {\n    let requestObj;\n    if (window.XMLHttpRequest) {\n      requestObj = new XMLHttpRequest;\n    } else {\n      requestObj = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n    let sendData = '';\n    if (type == 'POST') {\n      sendData = JSON.stringify(data);\n    }\n    requestObj.open(type, url, true);\n    requestObj.setRequestHeader('Content-Type','application/x-www-form-urlencoded');\n    requestObj.send(sendData);\n    requestObj.onreadystatechange = () => {\n      if (requestObj.readyState === 4) {\n        if (requestObj.state === 200) {\n          let obj = requestObj.response;\n          if (typeof obj !== 'object') {\n            obj = JSON.parse(obj);\n          }\n          return obj;\n        } else {\n          throw new Error(requestObj);\n        }\n      }\n    }\n  }\n\n};\nexport default ajax;\n"]}